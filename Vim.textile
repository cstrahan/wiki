h1. Vim

h2. Cheat Sheet

|Command|Action|
|:let mapleader = ","|set leader key to ","|
|Ctrl+O|jump to older locations|
|Ctrl+I|jump to newer locations|
|:registers|display content of all registers|
|"1p|paste from register 1|
|:read!dir|insert contents of command|
|Ctrl+W L|move current window to the right|
|Ctrl+W =|make all windows equal size|
|Ctrl+W _|maximize window|
|Ctrl+W +|grow window|
|Ctrl+W -|shrink window|
|Ctrl+W <|smaller width|
|Ctrl+W >|larger width|
|Ctrl+W +|maximize window|
|:hide|close current window|
|:wq|write and quit (hide buffer)|
|Ex|file explorer|
|be|buffer explorer (require plugin)|
|:map \|show mappings starting with \|
|Ctrl+W _|maximize window|
|:set linespace=2|set the spacing between lines|
|CTRL-]|follow help link|

h2. Fugitive.vim

```
:Gdiff
Brings up the staged version of the file side by side 
with the working tree version and use Vim's diff handling 
capabilities to stage a subset of the file's changes.

:Gedit
:Gsplit
:Gvsplit
:Gtabedit
View any blob, tree, commit, or tag in the repository

:Gstatus
Brings up the output of git status.
Press - to add/reset a file's changes, or p to add/reset --patch that mofo

:Gcommit

:Gmove
does a git mv on a file and simultaneously renames the buffer

:Gremove
does a git rm on a file and simultaneously deletes the buffer.

:Gblame
Press enter on a line to reblame the file as it stood in that commit, 
or o to open that commit in a split.

:Ggrep
search the work tree (or any arbitrary commit),
skipping over that which is not tracked in the repository

:Glog
loads all previous revisions of a file into the quickfix list
so you can iterate over them and watch the file evolve!

:Git
run any arbitrary command.


Add %{fugitive#statusline()} to 'statusline' to get an indicator 
with the current branch in your statusline.
```

h2. Surround.vim

```
(| is the position of cursor in these examples)

OVERVIEW
========

Normal mode
-----------
ds  - delete a surrounding
cs  - change a surrounding
ys  - add a surrounding
yS  - add a surrounding and place the surrounded text on a new line + indent it
yss - add a surrounding to the whole line
ySs - add a surrounding to the whole line, place it on a new line + indent it
ySS - same as ySs

Visual mode
-----------
s   - in visual mode, add a surrounding
S   - in visual mode, add a surrounding but place text on new line + indent it

Insert mode
-----------
<CTRL-s> - in insert mode, add a surrounding
<CTRL-s><CTRL-s> - in insert mode, add a new line + surrounding + indent
<CTRL-g>s - same as <CTRL-s>
<CTRL-g>S - same as <CTRL-s><CTRL-s>


EXAMPLES
========

Text              Command    New Text
---------------   -------    -----------
'Hello W|orld'    ds'        Hello World
(12|3+4*56)/2     ds(        123+4*56/2
<div>fo|o</div>   dst        foo


Text              Command    New Text
---------------   -------    -----------
"Hello |world!"   cs"'       'Hello world!'
"Hello |world!"   cs"<q>     <q>Hello world!</q>
(123+4|56)/2      cs)]       [123+456]/2
(123+4|56)/2      cs)[       [ 123+456 ]/2
<div>foo|</div>   cst<p>     <p>foo</p>
fo|o!             csw'       'foo'!
fo|o!             csW'       'foo!'


Text              Command      New Text
---------------   -------      -----------
Hello w|orld!     ysiw)        Hello (world)!
Hello w|orld!     csw)         Hello (world)!
fo|o              ysiwt<html>  <html>foo</html>
foo quu|x baz     yss"         "foo quux baz"
foo quu|x baz     ySS"         "
                                   foo quux baz
                               "

(insert mode)
Command                  New Text
-------                  ------------
<CTRL-s>"                ""
<CTRL-s><CTRL-s><html>   <html>
                             |
                         </html>
```

h2. Visual Studio Integration

(copied from "here":http://vim.wikia.com/wiki/Integrate_gvim_with_Visual_Studio)

If you are someone who prefers Vim and uses MS Visual Studio .NET for development, and you have been struggling with a less than perfect integration of the two, this tip may help you tighten that up. I've been working with the two together since .NET came out and this tip is a compilation of all the tricks and setup I use.

THE KEY: Before you do anything else, do this. goto Tools > External Tools > Add:

```
Title: &Vim
Command: C:\Program Files (x86)\Vim\vim73\gvim.exe
Arguments: --servername VimualStudio --remote-silent +"call cursor($(CurLine),$(CurCol))" $(ItemPath)
Initial directory: $(SolutionDir)
```

This will allow you to use the key combination Alt-t-v to open the current file at the current line and cursor in a new vim browser. The browser will start at the directory of that file, so ':e .' will edit the directory of that file. Remove the --servername VimualStudio part if you want to have each Alt-t-v to open a new instance of Vim.

THE SECOND KEY: In order to effectively use the two together and make sure .NET does not complain about its files changing, goto Tools > Options > Environment > Documents and ensure these two options are checked:

* Detect when file is changed outside the environment.
* Auto-load changes (if not currently modified inside the environment).

CTAGS: This is an obligatory statement, but a lot of MS developers do not know about ctags. Google for it and use it. This enables you to jump to tags, preview function declarations, use tab completion, and ton of things you can't live without. My personal mappings are: map " use C-] to goto a tag and C-[ to come back up the tag stack noremap } " use C-P to preview a tag in a small window For tag completion, there are a TON of options, but I use VimTip102 because it's simple and does the job: 

```vim
inoremap <Tab> <C-R>=InsertTabWrapper("forward")
inoremap <s-tab> <C-R>=InsertTabWrapper("backward")
```

One snag for ctags on MS is that the tag pathnames require the old dos style pathnames. Use the appropriate DIR switches to figure yours out:

```vim
set tags=./tags,tags,c:/projects/tags,c:/PROGRA~1/MIEEF7~1/tags
```

If you must use make at the command line ( I don't compile at command line for .NET but i've gotten it working. not sure where this tip was ), use:

```vim
set autowrite
setlocal errorformat=\ %#%f(%l)\ :\ %#%t%[A-z]%#\ %m
setlocal makeprg=devenv\ c:/Projects/MySolution.sln\ -build\ release
```

Lastly, if you are afraid to leave the IDE because you like Visual Assist's file browser, I'm maintaining a script to emulate that behavior [ProjectBrowse.vim]. It requires the unix find command which can be easily obtained via the cygwin win-unix set of utils.

```vim
map <a-o> :ProjectBrowse c:\Projects\<cr></cr></a-o>
```